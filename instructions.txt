Hello, mrBarmaley

Let's do following tasks:
1. Create hello world java application. GOAL: understand how the java applications can be run using IDE, start familiarizing with java packages. 
  * Create HelloWorld.java file in org.mrbarmaley package. It will contain class with the same name as the filename. 
      Main method inside it should write something to console using console output(System.out.println("blabllabla")).
  * Fix errors until class is 
  * Using some file explorer different from the one integrated in your IDE(eclipse?) browse inside your project on the filesystem and locate the .class file created by the IDE in the project related folders.  
  * Commit this file to the github.
  
While making this task google and put here your answers(own understanding!!! no copy paste from the external sources):
  What does compilation mean?
   > in a few words, compilation - is translation of human language to computer language.
   [pa] good enough. In our case it's a process of transforming Java language to the bytecode - language understood by java virtual machine(here and after - JVM). Bytecode for JVM can be received not only from translation java file, but also from other languages e.g. Scala. 
   
  What is a purpose of packages in java?
   > packages intended for cataloging classes. Packages allow you to better navigate in the project.
   [pa] As well it helps to avoid conflicts between classes you write and classes you import from the other projects. 
   
  What is special about the "main" method?
   > without using "main" method program it does not start. "main" method used as starting point to run application.
   [pa] exactly. However there are cases when we work in so-called frameworks(like Spring) and we don't necessarily write our own main method. Still for our current purpose your answer is good enough. 
   
  What is a difference between *.class and *.java files?
   > * java file is the original file.
     * class file is compiled file.
     If i write code in Notepad and save with the extension java, i have to compile this file.
  
  
I will put my comments/explanations based on what you will contribute to github. 
The more you will work, the more I'll be able to help. Good luck!

PS: feel free to add info here with partially found/understood answers.
_________________________________________________________________________________________________________
[6/16/2016]
1. Fix the project structure. At the moment your project hello-world is full of junk/unnecessary files. GOAL - get more experience with git, standardize project structure. Class files shouldn't be committed to the github. 
  Project structure should be following: 3 folders in the root - lib, src, test. lib should contain 1 folder "junit" -place there junit jar file which you will download from the web. src folder should contain you java files which we would consider as a production code. test - here we'll place all the java code that I will call tests in a following tasks. 
  Remove all the xml files from the github - there's no need to keep it here. Remove all unnecessary folders
 2. add additional package to your project - calculator and place there the class with calculator(IntegralCalculator) (in all cases when I say class I don't mean file with .class extension, I use this word in the java's meaning of the class). 
 IntegralCalculator - contains 4 methods - add, divide, subtract and multiply. Also this class should contain constructor with no arguments which will just write a line to the console - Calculator Created. All of the calculation methods should return int value(for divide just use integral operations e.g. 5/2=2 17/3=5) (you can also add the main  method if you want to test how it works with it)
 Add the test for this calculator which will separately test all the methods. Google on how to write junit testcases. 
      

What is object in java?
> objects of the world around us in a software environment.

What is method in java?
> method describes the action. 
for example, calculator: methods is addition, divide, subtract and multiply.

What is a signature of the method?
> signature is name&method parameters.

What is a method's body?
> In method body occurs method declaration. abstract method does not contain body.

What is a return value of the methods in java?
> after processing data, method can return data to output for further processing or other method.

Provide examples of the method signatures which return different types.
> Maybe i misunderstood your question, but docs.oracle.com says return types are not included in the method signature.

What does it mean if return type of the method is void?
>void method does not data return. if i need to data return, i must  declare return in code.

What is class in java? 
>in my understanding class, this is a set of drawings or a drawing which describes the action.

What is constructor in java? 
>Appointment constructor to create an object

What is jar file?
>jar this is archive wich contain files with classes. Jar has a higher functionality.

What is junit framework? 
> This is automated testing java code fragments.

What is a difference between objects and primitive types in java? Name here all the primitive types. 
>primitive type is one data element, the object may contain a large amount of data.
only 8 primitive types: byte, short, char, int, long, float, double, boolean.
1 sub-type void

Good luck!
_________________________________________________________________________________________________
How is it going? If you are facing particular issues please let me know about them. 
> honestly, i do not understand how to make calculator :-(

Sorry, but that's not a question... Please be more specific what your problem is 

more detailed instruction for calculator:
1. Create java file IntegralCalculator.java which you will place the code of your calculator.
2. Add the main method to this class with the following instructions:
     IntegralCalculator calculator = new IntegralCalculator();//creating new calculator object
     System.out.println(calculator.add(3,4));//briefly checking the addition operation... should result in 7 printed on the screen
     ....... - add printing statements for all the methods from  original task with the same example
 3. Create 4 methods in the same java class and fix their signatures and bodies until you don't have any compilation errors(I hope you already use some IDE so it should be properly well shown on the screen)
 4. All the method should be non-static(in comparison to main method which has a 'static' keyword in his signature) - shouldn't contain 'static'  word in signature.
 5. We can start without junit framework, but the point is start using common API as soon as possible. 
 
 I added more questions, and restructured a little bit.
 

  
